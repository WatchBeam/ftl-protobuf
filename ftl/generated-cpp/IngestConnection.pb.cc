// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: IngestConnection.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "IngestConnection.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace Beam {
namespace Ftl {
namespace Ingest {
namespace Messages {
namespace Connection {
class IngestMessageDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<IngestMessage> {
} _IngestMessage_default_instance_;
class ConnectDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Connect> {
} _Connect_default_instance_;
class Connect_ResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Connect_Response> {
} _Connect_Response_default_instance_;

namespace protobuf_IngestConnection_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[3];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[3];

}  // namespace

const ::google::protobuf::uint32 TableStruct::offsets[] = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IngestMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IngestMessage, statuscode_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IngestMessage, commandtype_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IngestMessage, command_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Connect, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Connect, clientprotocolversion_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Connect_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Connect_Response, serverprotocolversion_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Connect_Response, statuscode_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Connect_Response, hmackey_),
};

static const ::google::protobuf::internal::MigrationSchema schemas[] = {
  { 0, -1, sizeof(IngestMessage)},
  { 7, -1, sizeof(Connect)},
  { 12, -1, sizeof(Connect_Response)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_IngestMessage_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Connect_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Connect_Response_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "IngestConnection.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 3);
}

}  // namespace

void TableStruct::Shutdown() {
  _IngestMessage_default_instance_.Shutdown();
  delete file_level_metadata[0].reflection;
  _Connect_default_instance_.Shutdown();
  delete file_level_metadata[1].reflection;
  _Connect_Response_default_instance_.Shutdown();
  delete file_level_metadata[2].reflection;
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  ::google::protobuf::protobuf_google_2fprotobuf_2fany_2eproto::InitDefaults();
  _IngestMessage_default_instance_.DefaultConstruct();
  _Connect_default_instance_.DefaultConstruct();
  _Connect_Response_default_instance_.DefaultConstruct();
  _IngestMessage_default_instance_.get_mutable()->command_ = const_cast< ::google::protobuf::Any*>(
      ::google::protobuf::Any::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] = {
      "\n\026IngestConnection.proto\022#Beam.Ftl.Inges"
      "t.Messages.Connection\032\031google/protobuf/a"
      "ny.proto\"\303\001\n\rIngestMessage\022D\n\nStatusCode"
      "\030\001 \001(\01620.Beam.Ftl.Ingest.Messages.Connec"
      "tion.StatusCodes\022E\n\013CommandType\030\002 \001(\01620."
      "Beam.Ftl.Ingest.Messages.Connection.Comm"
      "andType\022%\n\007Command\030\003 \001(\0132\024.google.protob"
      "uf.Any\"^\n\007Connect\022S\n\025ClientProtocolVersi"
      "on\030\001 \001(\01624.Beam.Ftl.Ingest.Messages.Conn"
      "ection.ProtocolVersion\"\276\001\n\020Connect_Respo"
      "nse\022S\n\025ServerProtocolVersion\030\001 \001(\01624.Bea"
      "m.Ftl.Ingest.Messages.Connection.Protoco"
      "lVersion\022D\n\nStatusCode\030\002 \001(\01620.Beam.Ftl."
      "Ingest.Messages.Connection.StatusCodes\022\017"
      "\n\007HmacKey\030\003 \001(\t*!\n\017ProtocolVersion\022\006\n\002V0"
      "\020\000\022\006\n\002V1\020\001*\262\002\n\013StatusCodes\022\013\n\007UNKNOWN\020\000\022"
      "\007\n\002OK\020\310\001\022\t\n\004PING\020\311\001\022\020\n\013BAD_REQUEST\020\220\003\022\021\n"
      "\014UNAUTHORIZED\020\221\003\022\020\n\013OLD_VERSION\020\222\003\022\031\n\024AU"
      "DIO_SSRC_COLLISION\020\223\003\022\031\n\024VIDEO_SSRC_COLL"
      "ISION\020\224\003\022\027\n\022INVALID_STREAM_KEY\020\225\003\022\023\n\016CHA"
      "NNEL_IN_USE\020\226\003\022\027\n\022REGION_UNSUPPORTED\020\227\003\022"
      "\025\n\020NO_MEDIA_TIMEOUT\020\230\003\022\032\n\025INTERNAL_SERVE"
      "R_ERROR\020\364\003\022\033\n\026INTERNAL_COMMAND_ERROR\020\365\003*"
      "0\n\013CommandType\022\013\n\007CONNECT\020\000\022\024\n\020CONNECT_R"
      "ESPONSE\020\001b\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 977);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "IngestConnection.proto", &protobuf_RegisterTypes);
  ::google::protobuf::protobuf_google_2fprotobuf_2fany_2eproto::AddDescriptors();
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_IngestConnection_2eproto

const ::google::protobuf::EnumDescriptor* ProtocolVersion_descriptor() {
  protobuf_IngestConnection_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_IngestConnection_2eproto::file_level_enum_descriptors[0];
}
bool ProtocolVersion_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* StatusCodes_descriptor() {
  protobuf_IngestConnection_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_IngestConnection_2eproto::file_level_enum_descriptors[1];
}
bool StatusCodes_IsValid(int value) {
  switch (value) {
    case 0:
    case 200:
    case 201:
    case 400:
    case 401:
    case 402:
    case 403:
    case 404:
    case 405:
    case 406:
    case 407:
    case 408:
    case 500:
    case 501:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* CommandType_descriptor() {
  protobuf_IngestConnection_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_IngestConnection_2eproto::file_level_enum_descriptors[2];
}
bool CommandType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int IngestMessage::kStatusCodeFieldNumber;
const int IngestMessage::kCommandTypeFieldNumber;
const int IngestMessage::kCommandFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

IngestMessage::IngestMessage()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_IngestConnection_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:Beam.Ftl.Ingest.Messages.Connection.IngestMessage)
}
IngestMessage::IngestMessage(const IngestMessage& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_command()) {
    command_ = new ::google::protobuf::Any(*from.command_);
  } else {
    command_ = NULL;
  }
  ::memcpy(&statuscode_, &from.statuscode_,
    reinterpret_cast<char*>(&commandtype_) -
    reinterpret_cast<char*>(&statuscode_) + sizeof(commandtype_));
  // @@protoc_insertion_point(copy_constructor:Beam.Ftl.Ingest.Messages.Connection.IngestMessage)
}

void IngestMessage::SharedCtor() {
  ::memset(&command_, 0, reinterpret_cast<char*>(&commandtype_) -
    reinterpret_cast<char*>(&command_) + sizeof(commandtype_));
  _cached_size_ = 0;
}

IngestMessage::~IngestMessage() {
  // @@protoc_insertion_point(destructor:Beam.Ftl.Ingest.Messages.Connection.IngestMessage)
  SharedDtor();
}

void IngestMessage::SharedDtor() {
  if (this != internal_default_instance()) {
    delete command_;
  }
}

void IngestMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* IngestMessage::descriptor() {
  protobuf_IngestConnection_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_IngestConnection_2eproto::file_level_metadata[0].descriptor;
}

const IngestMessage& IngestMessage::default_instance() {
  protobuf_IngestConnection_2eproto::InitDefaults();
  return *internal_default_instance();
}

IngestMessage* IngestMessage::New(::google::protobuf::Arena* arena) const {
  IngestMessage* n = new IngestMessage;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void IngestMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:Beam.Ftl.Ingest.Messages.Connection.IngestMessage)
  if (GetArenaNoVirtual() == NULL && command_ != NULL) {
    delete command_;
  }
  command_ = NULL;
  ::memset(&statuscode_, 0, reinterpret_cast<char*>(&commandtype_) -
    reinterpret_cast<char*>(&statuscode_) + sizeof(commandtype_));
}

bool IngestMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Beam.Ftl.Ingest.Messages.Connection.IngestMessage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .Beam.Ftl.Ingest.Messages.Connection.StatusCodes StatusCode = 1;
      case 1: {
        if (tag == 8u) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_statuscode(static_cast< ::Beam::Ftl::Ingest::Messages::Connection::StatusCodes >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .Beam.Ftl.Ingest.Messages.Connection.CommandType CommandType = 2;
      case 2: {
        if (tag == 16u) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_commandtype(static_cast< ::Beam::Ftl::Ingest::Messages::Connection::CommandType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.Any Command = 3;
      case 3: {
        if (tag == 26u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_command()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Beam.Ftl.Ingest.Messages.Connection.IngestMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Beam.Ftl.Ingest.Messages.Connection.IngestMessage)
  return false;
#undef DO_
}

void IngestMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Beam.Ftl.Ingest.Messages.Connection.IngestMessage)
  // .Beam.Ftl.Ingest.Messages.Connection.StatusCodes StatusCode = 1;
  if (this->statuscode() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->statuscode(), output);
  }

  // .Beam.Ftl.Ingest.Messages.Connection.CommandType CommandType = 2;
  if (this->commandtype() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->commandtype(), output);
  }

  // .google.protobuf.Any Command = 3;
  if (this->has_command()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->command_, output);
  }

  // @@protoc_insertion_point(serialize_end:Beam.Ftl.Ingest.Messages.Connection.IngestMessage)
}

::google::protobuf::uint8* IngestMessage::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Beam.Ftl.Ingest.Messages.Connection.IngestMessage)
  // .Beam.Ftl.Ingest.Messages.Connection.StatusCodes StatusCode = 1;
  if (this->statuscode() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->statuscode(), target);
  }

  // .Beam.Ftl.Ingest.Messages.Connection.CommandType CommandType = 2;
  if (this->commandtype() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->commandtype(), target);
  }

  // .google.protobuf.Any Command = 3;
  if (this->has_command()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->command_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:Beam.Ftl.Ingest.Messages.Connection.IngestMessage)
  return target;
}

size_t IngestMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Beam.Ftl.Ingest.Messages.Connection.IngestMessage)
  size_t total_size = 0;

  // .google.protobuf.Any Command = 3;
  if (this->has_command()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->command_);
  }

  // .Beam.Ftl.Ingest.Messages.Connection.StatusCodes StatusCode = 1;
  if (this->statuscode() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->statuscode());
  }

  // .Beam.Ftl.Ingest.Messages.Connection.CommandType CommandType = 2;
  if (this->commandtype() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->commandtype());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IngestMessage::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Beam.Ftl.Ingest.Messages.Connection.IngestMessage)
  GOOGLE_DCHECK_NE(&from, this);
  const IngestMessage* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const IngestMessage>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Beam.Ftl.Ingest.Messages.Connection.IngestMessage)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Beam.Ftl.Ingest.Messages.Connection.IngestMessage)
    MergeFrom(*source);
  }
}

void IngestMessage::MergeFrom(const IngestMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Beam.Ftl.Ingest.Messages.Connection.IngestMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_command()) {
    mutable_command()->::google::protobuf::Any::MergeFrom(from.command());
  }
  if (from.statuscode() != 0) {
    set_statuscode(from.statuscode());
  }
  if (from.commandtype() != 0) {
    set_commandtype(from.commandtype());
  }
}

void IngestMessage::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Beam.Ftl.Ingest.Messages.Connection.IngestMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IngestMessage::CopyFrom(const IngestMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Beam.Ftl.Ingest.Messages.Connection.IngestMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IngestMessage::IsInitialized() const {
  return true;
}

void IngestMessage::Swap(IngestMessage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void IngestMessage::InternalSwap(IngestMessage* other) {
  std::swap(command_, other->command_);
  std::swap(statuscode_, other->statuscode_);
  std::swap(commandtype_, other->commandtype_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata IngestMessage::GetMetadata() const {
  protobuf_IngestConnection_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_IngestConnection_2eproto::file_level_metadata[0];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// IngestMessage

// .Beam.Ftl.Ingest.Messages.Connection.StatusCodes StatusCode = 1;
void IngestMessage::clear_statuscode() {
  statuscode_ = 0;
}
::Beam::Ftl::Ingest::Messages::Connection::StatusCodes IngestMessage::statuscode() const {
  // @@protoc_insertion_point(field_get:Beam.Ftl.Ingest.Messages.Connection.IngestMessage.StatusCode)
  return static_cast< ::Beam::Ftl::Ingest::Messages::Connection::StatusCodes >(statuscode_);
}
void IngestMessage::set_statuscode(::Beam::Ftl::Ingest::Messages::Connection::StatusCodes value) {
  
  statuscode_ = value;
  // @@protoc_insertion_point(field_set:Beam.Ftl.Ingest.Messages.Connection.IngestMessage.StatusCode)
}

// .Beam.Ftl.Ingest.Messages.Connection.CommandType CommandType = 2;
void IngestMessage::clear_commandtype() {
  commandtype_ = 0;
}
::Beam::Ftl::Ingest::Messages::Connection::CommandType IngestMessage::commandtype() const {
  // @@protoc_insertion_point(field_get:Beam.Ftl.Ingest.Messages.Connection.IngestMessage.CommandType)
  return static_cast< ::Beam::Ftl::Ingest::Messages::Connection::CommandType >(commandtype_);
}
void IngestMessage::set_commandtype(::Beam::Ftl::Ingest::Messages::Connection::CommandType value) {
  
  commandtype_ = value;
  // @@protoc_insertion_point(field_set:Beam.Ftl.Ingest.Messages.Connection.IngestMessage.CommandType)
}

// .google.protobuf.Any Command = 3;
bool IngestMessage::has_command() const {
  return this != internal_default_instance() && command_ != NULL;
}
void IngestMessage::clear_command() {
  if (GetArenaNoVirtual() == NULL && command_ != NULL) delete command_;
  command_ = NULL;
}
const ::google::protobuf::Any& IngestMessage::command() const {
  // @@protoc_insertion_point(field_get:Beam.Ftl.Ingest.Messages.Connection.IngestMessage.Command)
  return command_ != NULL ? *command_
                         : *::google::protobuf::Any::internal_default_instance();
}
::google::protobuf::Any* IngestMessage::mutable_command() {
  
  if (command_ == NULL) {
    command_ = new ::google::protobuf::Any;
  }
  // @@protoc_insertion_point(field_mutable:Beam.Ftl.Ingest.Messages.Connection.IngestMessage.Command)
  return command_;
}
::google::protobuf::Any* IngestMessage::release_command() {
  // @@protoc_insertion_point(field_release:Beam.Ftl.Ingest.Messages.Connection.IngestMessage.Command)
  
  ::google::protobuf::Any* temp = command_;
  command_ = NULL;
  return temp;
}
void IngestMessage::set_allocated_command(::google::protobuf::Any* command) {
  delete command_;
  command_ = command;
  if (command) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:Beam.Ftl.Ingest.Messages.Connection.IngestMessage.Command)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Connect::kClientProtocolVersionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Connect::Connect()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_IngestConnection_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:Beam.Ftl.Ingest.Messages.Connection.Connect)
}
Connect::Connect(const Connect& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  clientprotocolversion_ = from.clientprotocolversion_;
  // @@protoc_insertion_point(copy_constructor:Beam.Ftl.Ingest.Messages.Connection.Connect)
}

void Connect::SharedCtor() {
  clientprotocolversion_ = 0;
  _cached_size_ = 0;
}

Connect::~Connect() {
  // @@protoc_insertion_point(destructor:Beam.Ftl.Ingest.Messages.Connection.Connect)
  SharedDtor();
}

void Connect::SharedDtor() {
}

void Connect::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Connect::descriptor() {
  protobuf_IngestConnection_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_IngestConnection_2eproto::file_level_metadata[1].descriptor;
}

const Connect& Connect::default_instance() {
  protobuf_IngestConnection_2eproto::InitDefaults();
  return *internal_default_instance();
}

Connect* Connect::New(::google::protobuf::Arena* arena) const {
  Connect* n = new Connect;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Connect::Clear() {
// @@protoc_insertion_point(message_clear_start:Beam.Ftl.Ingest.Messages.Connection.Connect)
  clientprotocolversion_ = 0;
}

bool Connect::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Beam.Ftl.Ingest.Messages.Connection.Connect)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .Beam.Ftl.Ingest.Messages.Connection.ProtocolVersion ClientProtocolVersion = 1;
      case 1: {
        if (tag == 8u) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_clientprotocolversion(static_cast< ::Beam::Ftl::Ingest::Messages::Connection::ProtocolVersion >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Beam.Ftl.Ingest.Messages.Connection.Connect)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Beam.Ftl.Ingest.Messages.Connection.Connect)
  return false;
#undef DO_
}

void Connect::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Beam.Ftl.Ingest.Messages.Connection.Connect)
  // .Beam.Ftl.Ingest.Messages.Connection.ProtocolVersion ClientProtocolVersion = 1;
  if (this->clientprotocolversion() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->clientprotocolversion(), output);
  }

  // @@protoc_insertion_point(serialize_end:Beam.Ftl.Ingest.Messages.Connection.Connect)
}

::google::protobuf::uint8* Connect::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Beam.Ftl.Ingest.Messages.Connection.Connect)
  // .Beam.Ftl.Ingest.Messages.Connection.ProtocolVersion ClientProtocolVersion = 1;
  if (this->clientprotocolversion() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->clientprotocolversion(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:Beam.Ftl.Ingest.Messages.Connection.Connect)
  return target;
}

size_t Connect::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Beam.Ftl.Ingest.Messages.Connection.Connect)
  size_t total_size = 0;

  // .Beam.Ftl.Ingest.Messages.Connection.ProtocolVersion ClientProtocolVersion = 1;
  if (this->clientprotocolversion() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->clientprotocolversion());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Connect::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Beam.Ftl.Ingest.Messages.Connection.Connect)
  GOOGLE_DCHECK_NE(&from, this);
  const Connect* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Connect>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Beam.Ftl.Ingest.Messages.Connection.Connect)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Beam.Ftl.Ingest.Messages.Connection.Connect)
    MergeFrom(*source);
  }
}

void Connect::MergeFrom(const Connect& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Beam.Ftl.Ingest.Messages.Connection.Connect)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.clientprotocolversion() != 0) {
    set_clientprotocolversion(from.clientprotocolversion());
  }
}

void Connect::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Beam.Ftl.Ingest.Messages.Connection.Connect)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Connect::CopyFrom(const Connect& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Beam.Ftl.Ingest.Messages.Connection.Connect)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Connect::IsInitialized() const {
  return true;
}

void Connect::Swap(Connect* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Connect::InternalSwap(Connect* other) {
  std::swap(clientprotocolversion_, other->clientprotocolversion_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Connect::GetMetadata() const {
  protobuf_IngestConnection_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_IngestConnection_2eproto::file_level_metadata[1];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Connect

// .Beam.Ftl.Ingest.Messages.Connection.ProtocolVersion ClientProtocolVersion = 1;
void Connect::clear_clientprotocolversion() {
  clientprotocolversion_ = 0;
}
::Beam::Ftl::Ingest::Messages::Connection::ProtocolVersion Connect::clientprotocolversion() const {
  // @@protoc_insertion_point(field_get:Beam.Ftl.Ingest.Messages.Connection.Connect.ClientProtocolVersion)
  return static_cast< ::Beam::Ftl::Ingest::Messages::Connection::ProtocolVersion >(clientprotocolversion_);
}
void Connect::set_clientprotocolversion(::Beam::Ftl::Ingest::Messages::Connection::ProtocolVersion value) {
  
  clientprotocolversion_ = value;
  // @@protoc_insertion_point(field_set:Beam.Ftl.Ingest.Messages.Connection.Connect.ClientProtocolVersion)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Connect_Response::kServerProtocolVersionFieldNumber;
const int Connect_Response::kStatusCodeFieldNumber;
const int Connect_Response::kHmacKeyFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Connect_Response::Connect_Response()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_IngestConnection_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:Beam.Ftl.Ingest.Messages.Connection.Connect_Response)
}
Connect_Response::Connect_Response(const Connect_Response& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  hmackey_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.hmackey().size() > 0) {
    hmackey_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.hmackey_);
  }
  ::memcpy(&serverprotocolversion_, &from.serverprotocolversion_,
    reinterpret_cast<char*>(&statuscode_) -
    reinterpret_cast<char*>(&serverprotocolversion_) + sizeof(statuscode_));
  // @@protoc_insertion_point(copy_constructor:Beam.Ftl.Ingest.Messages.Connection.Connect_Response)
}

void Connect_Response::SharedCtor() {
  hmackey_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&serverprotocolversion_, 0, reinterpret_cast<char*>(&statuscode_) -
    reinterpret_cast<char*>(&serverprotocolversion_) + sizeof(statuscode_));
  _cached_size_ = 0;
}

Connect_Response::~Connect_Response() {
  // @@protoc_insertion_point(destructor:Beam.Ftl.Ingest.Messages.Connection.Connect_Response)
  SharedDtor();
}

void Connect_Response::SharedDtor() {
  hmackey_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Connect_Response::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Connect_Response::descriptor() {
  protobuf_IngestConnection_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_IngestConnection_2eproto::file_level_metadata[2].descriptor;
}

const Connect_Response& Connect_Response::default_instance() {
  protobuf_IngestConnection_2eproto::InitDefaults();
  return *internal_default_instance();
}

Connect_Response* Connect_Response::New(::google::protobuf::Arena* arena) const {
  Connect_Response* n = new Connect_Response;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Connect_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:Beam.Ftl.Ingest.Messages.Connection.Connect_Response)
  hmackey_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&serverprotocolversion_, 0, reinterpret_cast<char*>(&statuscode_) -
    reinterpret_cast<char*>(&serverprotocolversion_) + sizeof(statuscode_));
}

bool Connect_Response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Beam.Ftl.Ingest.Messages.Connection.Connect_Response)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .Beam.Ftl.Ingest.Messages.Connection.ProtocolVersion ServerProtocolVersion = 1;
      case 1: {
        if (tag == 8u) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_serverprotocolversion(static_cast< ::Beam::Ftl::Ingest::Messages::Connection::ProtocolVersion >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .Beam.Ftl.Ingest.Messages.Connection.StatusCodes StatusCode = 2;
      case 2: {
        if (tag == 16u) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_statuscode(static_cast< ::Beam::Ftl::Ingest::Messages::Connection::StatusCodes >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string HmacKey = 3;
      case 3: {
        if (tag == 26u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_hmackey()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->hmackey().data(), this->hmackey().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "Beam.Ftl.Ingest.Messages.Connection.Connect_Response.HmacKey"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Beam.Ftl.Ingest.Messages.Connection.Connect_Response)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Beam.Ftl.Ingest.Messages.Connection.Connect_Response)
  return false;
#undef DO_
}

void Connect_Response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Beam.Ftl.Ingest.Messages.Connection.Connect_Response)
  // .Beam.Ftl.Ingest.Messages.Connection.ProtocolVersion ServerProtocolVersion = 1;
  if (this->serverprotocolversion() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->serverprotocolversion(), output);
  }

  // .Beam.Ftl.Ingest.Messages.Connection.StatusCodes StatusCode = 2;
  if (this->statuscode() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->statuscode(), output);
  }

  // string HmacKey = 3;
  if (this->hmackey().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->hmackey().data(), this->hmackey().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Beam.Ftl.Ingest.Messages.Connection.Connect_Response.HmacKey");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->hmackey(), output);
  }

  // @@protoc_insertion_point(serialize_end:Beam.Ftl.Ingest.Messages.Connection.Connect_Response)
}

::google::protobuf::uint8* Connect_Response::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Beam.Ftl.Ingest.Messages.Connection.Connect_Response)
  // .Beam.Ftl.Ingest.Messages.Connection.ProtocolVersion ServerProtocolVersion = 1;
  if (this->serverprotocolversion() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->serverprotocolversion(), target);
  }

  // .Beam.Ftl.Ingest.Messages.Connection.StatusCodes StatusCode = 2;
  if (this->statuscode() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->statuscode(), target);
  }

  // string HmacKey = 3;
  if (this->hmackey().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->hmackey().data(), this->hmackey().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Beam.Ftl.Ingest.Messages.Connection.Connect_Response.HmacKey");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->hmackey(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:Beam.Ftl.Ingest.Messages.Connection.Connect_Response)
  return target;
}

size_t Connect_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Beam.Ftl.Ingest.Messages.Connection.Connect_Response)
  size_t total_size = 0;

  // string HmacKey = 3;
  if (this->hmackey().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->hmackey());
  }

  // .Beam.Ftl.Ingest.Messages.Connection.ProtocolVersion ServerProtocolVersion = 1;
  if (this->serverprotocolversion() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->serverprotocolversion());
  }

  // .Beam.Ftl.Ingest.Messages.Connection.StatusCodes StatusCode = 2;
  if (this->statuscode() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->statuscode());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Connect_Response::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Beam.Ftl.Ingest.Messages.Connection.Connect_Response)
  GOOGLE_DCHECK_NE(&from, this);
  const Connect_Response* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Connect_Response>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Beam.Ftl.Ingest.Messages.Connection.Connect_Response)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Beam.Ftl.Ingest.Messages.Connection.Connect_Response)
    MergeFrom(*source);
  }
}

void Connect_Response::MergeFrom(const Connect_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Beam.Ftl.Ingest.Messages.Connection.Connect_Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.hmackey().size() > 0) {

    hmackey_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.hmackey_);
  }
  if (from.serverprotocolversion() != 0) {
    set_serverprotocolversion(from.serverprotocolversion());
  }
  if (from.statuscode() != 0) {
    set_statuscode(from.statuscode());
  }
}

void Connect_Response::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Beam.Ftl.Ingest.Messages.Connection.Connect_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Connect_Response::CopyFrom(const Connect_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Beam.Ftl.Ingest.Messages.Connection.Connect_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Connect_Response::IsInitialized() const {
  return true;
}

void Connect_Response::Swap(Connect_Response* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Connect_Response::InternalSwap(Connect_Response* other) {
  hmackey_.Swap(&other->hmackey_);
  std::swap(serverprotocolversion_, other->serverprotocolversion_);
  std::swap(statuscode_, other->statuscode_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Connect_Response::GetMetadata() const {
  protobuf_IngestConnection_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_IngestConnection_2eproto::file_level_metadata[2];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Connect_Response

// .Beam.Ftl.Ingest.Messages.Connection.ProtocolVersion ServerProtocolVersion = 1;
void Connect_Response::clear_serverprotocolversion() {
  serverprotocolversion_ = 0;
}
::Beam::Ftl::Ingest::Messages::Connection::ProtocolVersion Connect_Response::serverprotocolversion() const {
  // @@protoc_insertion_point(field_get:Beam.Ftl.Ingest.Messages.Connection.Connect_Response.ServerProtocolVersion)
  return static_cast< ::Beam::Ftl::Ingest::Messages::Connection::ProtocolVersion >(serverprotocolversion_);
}
void Connect_Response::set_serverprotocolversion(::Beam::Ftl::Ingest::Messages::Connection::ProtocolVersion value) {
  
  serverprotocolversion_ = value;
  // @@protoc_insertion_point(field_set:Beam.Ftl.Ingest.Messages.Connection.Connect_Response.ServerProtocolVersion)
}

// .Beam.Ftl.Ingest.Messages.Connection.StatusCodes StatusCode = 2;
void Connect_Response::clear_statuscode() {
  statuscode_ = 0;
}
::Beam::Ftl::Ingest::Messages::Connection::StatusCodes Connect_Response::statuscode() const {
  // @@protoc_insertion_point(field_get:Beam.Ftl.Ingest.Messages.Connection.Connect_Response.StatusCode)
  return static_cast< ::Beam::Ftl::Ingest::Messages::Connection::StatusCodes >(statuscode_);
}
void Connect_Response::set_statuscode(::Beam::Ftl::Ingest::Messages::Connection::StatusCodes value) {
  
  statuscode_ = value;
  // @@protoc_insertion_point(field_set:Beam.Ftl.Ingest.Messages.Connection.Connect_Response.StatusCode)
}

// string HmacKey = 3;
void Connect_Response::clear_hmackey() {
  hmackey_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& Connect_Response::hmackey() const {
  // @@protoc_insertion_point(field_get:Beam.Ftl.Ingest.Messages.Connection.Connect_Response.HmacKey)
  return hmackey_.GetNoArena();
}
void Connect_Response::set_hmackey(const ::std::string& value) {
  
  hmackey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Beam.Ftl.Ingest.Messages.Connection.Connect_Response.HmacKey)
}
#if LANG_CXX11
void Connect_Response::set_hmackey(::std::string&& value) {
  
  hmackey_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Beam.Ftl.Ingest.Messages.Connection.Connect_Response.HmacKey)
}
#endif
void Connect_Response::set_hmackey(const char* value) {
  
  hmackey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Beam.Ftl.Ingest.Messages.Connection.Connect_Response.HmacKey)
}
void Connect_Response::set_hmackey(const char* value, size_t size) {
  
  hmackey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Beam.Ftl.Ingest.Messages.Connection.Connect_Response.HmacKey)
}
::std::string* Connect_Response::mutable_hmackey() {
  
  // @@protoc_insertion_point(field_mutable:Beam.Ftl.Ingest.Messages.Connection.Connect_Response.HmacKey)
  return hmackey_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Connect_Response::release_hmackey() {
  // @@protoc_insertion_point(field_release:Beam.Ftl.Ingest.Messages.Connection.Connect_Response.HmacKey)
  
  return hmackey_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Connect_Response::set_allocated_hmackey(::std::string* hmackey) {
  if (hmackey != NULL) {
    
  } else {
    
  }
  hmackey_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), hmackey);
  // @@protoc_insertion_point(field_set_allocated:Beam.Ftl.Ingest.Messages.Connection.Connect_Response.HmacKey)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace Connection
}  // namespace Messages
}  // namespace Ingest
}  // namespace Ftl
}  // namespace Beam

// @@protoc_insertion_point(global_scope)
